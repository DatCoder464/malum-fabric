plugins {
	id 'maven-publish'
	alias(libs.plugins.quilt.loom)
}

archivesBaseName = project.archives_base_name
version = project.version
group = project.maven_group

repositories {
	maven {
	    url 'https://api.modrinth.com/maven'
	    content {
		    includeGroup 'maven.modrinth'
	    }
	}
	maven { url 'https://maven.quiltmc.org/repository/snapshot' }
	maven { url 'https://maven.terraformersmc.com' }
	maven { url 'https://ladysnake.jfrog.io/artifactory/mods' }
	maven { url 'https://jitpack.io' }
	maven { url "https://maven.shedaniel.me" }
	mavenCentral()
}

loom {
	accessWidenerPath = file("src/main/resources/malum.accesswidener")
}

dependencies {
	minecraft libs.minecraft
	mappings loom.layered {
		addLayer quiltMappings.mappings("org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:v2")
	}

	// exists when running dev env & in code
	modImplementation(libs.trinkets) {
		exclude group: "net.fabricmc"
		exclude group: "net.fabricmc.fabric-api"
		exclude group: "com.terraformersmc"
	}
	modImplementation(libs.cardinal.components.base) {
		exclude group: "net.fabricmc"
		exclude group: "net.fabricmc.fabric-api"
	}
	modImplementation(libs.cardinal.components.entity) {
		exclude group: "net.fabricmc"
		exclude group: "net.fabricmc.fabric-api"
	}
	modImplementation(libs.quilt.loading.screen)
	modImplementation(libs.quilted.fabric.api)
	modImplementation(libs.quilt.loader)
	modImplementation(libs.fabric.asm)
	modImplementation(libs.midnightlib)
	modImplementation(libs.annotations)
	modImplementation(libs.isnrmn)
	modImplementation(libs.satin)
	modImplementation(libs.emi)

	// meta-inf these pls:
	include(libs.satin)
	include(libs.fabric.asm)
	include(libs.mixin.extras)

	// i believe this means only exists running dev env
	modRuntimeOnly("maven.modrinth:sodium:mc1.18.2-0.4.1")
	modRuntimeOnly("maven.modrinth:iris:1.18.x-v1.2.4")
	modRuntimeOnly("maven.modrinth:lazydfu:0.1.2")

	runtimeOnly compileOnly("org.anarres:jcpp:1.4.14") // for iris

	runtimeOnly('org.joml:joml:1.10.4') // for sodium

	implementation(libs.mixin.extras)

	annotationProcessor(libs.mixin.extras)
}

configurations.all {
	resolutionStrategy.dependencySubstitution {
		substitute module('net.fabricmc:fabric-loader') using module(libs.quilt.loader.get().toString())
		all { DependencySubstitution dependency ->
			if (dependency.requested instanceof ModuleComponentSelector && dependency.requested.group == 'net.fabricmc.fabric-api') {
				if (dependency.requested.module == 'fabric-api')
					dependency.useTarget libs.quilted.fabric.api.get().toString()
				else
					dependency.useTarget 'org.quiltmc.quilted-fabric-api' + ':' + dependency.requested.module + ':' + libs.versions.quilted.fabric.api.get()
			}
		}
	}
}

processResources {
	inputs.property "version", version

	filesMatching('quilt.mod.json') {
		expand "version": version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {

	}
}
