package ca.rttv.malum.registry;

import ca.rttv.malum.Malum;
import ca.rttv.malum.block.*;
import ca.rttv.malum.block.sapling.RunewoodSaplingGenerator;
import ca.rttv.malum.block.sapling.SoulwoodSaplingGenerator;
import net.minecraft.block.*;
import net.minecraft.block.AbstractBlock.Settings;
import net.minecraft.sound.BlockSoundGroup;
import net.minecraft.util.Identifier;
import net.minecraft.util.registry.Registry;

import java.util.LinkedHashMap;
import java.util.Map;

@SuppressWarnings("unused")
public interface MalumBlockRegistry {
    Map<Identifier, Block> BLOCKS = new LinkedHashMap<>();
    
    Block RUNEWOOD_LEAVES                             = register("runewood_leaves",                           new GradientLeavesBlock(Settings.of(Material.LEAVES).strength(0.2f).ticksRandomly().sounds(BlockSoundGroup.GRASS).nonOpaque()));
    Block RUNEWOOD_SAPLING                            = register("runewood_sapling",                          new SaplingBlock(new RunewoodSaplingGenerator(), Settings.of(Material.LEAVES).ticksRandomly().noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS)));
    Block STRIPPED_RUNEWOOD_LOG                       = register("stripped_runewood_log",                     new PillarBlock(Settings.of(Material.WOOD).strength(2.0f).sounds(BlockSoundGroup.WOOD)));
    Block RUNEWOOD_LOG                                = register("runewood_log",                              new StrippableLogBlock(() -> STRIPPED_RUNEWOOD_LOG, Settings.of(Material.WOOD).strength(2.0f).sounds(BlockSoundGroup.WOOD)));

    Block STRIPPED_RUNEWOOD                           = register("stripped_runewood",                         new PillarBlock(Settings.of(Material.WOOD).strength(2.0f).sounds(BlockSoundGroup.WOOD)));
    Block RUNEWOOD                                    = register("runewood",                                  new StrippableLogBlock(() -> STRIPPED_RUNEWOOD, Settings.of(Material.WOOD).strength(2.0f).sounds(BlockSoundGroup.WOOD)));

    Block REVEALED_RUNEWOOD_LOG                       = register("revealed_runewood_log",                     new RevealedPillarBlock(Settings.of(Material.WOOD).strength(2.0f).sounds(BlockSoundGroup.WOOD), STRIPPED_RUNEWOOD_LOG, true));
    Block EXPOSED_RUNEWOOD_LOG                        = register("exposed_runewood_log",                      new StrippableLogBlock(() -> REVEALED_RUNEWOOD_LOG, Settings.of(Material.WOOD).strength(2.0f).sounds(BlockSoundGroup.WOOD)));
    // RUNEWOOD_PLANKS (in the planks registry)
    Block VERTICAL_RUNEWOOD_PLANKS                    = register("vertical_runewood_planks",                  new Block(Settings.of(Material.WOOD, MapColor.DIRT_BROWN).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block RUNEWOOD_PANEL                              = register("runewood_panel",                            new Block(Settings.of(Material.WOOD, MapColor.DIRT_BROWN).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block RUNEWOOD_TILES                              = register("runewood_tiles",                            new Block(Settings.of(Material.WOOD, MapColor.DIRT_BROWN).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block RUNEWOOD_PLANKS_SLAB                        = register("runewood_planks_slab",                      new SlabBlock(Settings.of(Material.WOOD, MapColor.DIRT_BROWN).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block VERTICAL_RUNEWOOD_PLANKS_SLAB               = register("vertical_runewood_planks_slab",             new SlabBlock(Settings.of(Material.WOOD, MapColor.DIRT_BROWN).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block RUNEWOOD_PANEL_SLAB                         = register("runewood_panel_slab",                       new SlabBlock(Settings.of(Material.WOOD, MapColor.DIRT_BROWN).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block RUNEWOOD_TILES_SLAB                         = register("runewood_tiles_slab",                       new SlabBlock(Settings.of(Material.WOOD, MapColor.DIRT_BROWN).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block RUNEWOOD_PLANKS_STAIRS                      = register("runewood_planks_stairs",                    new StairsBlock(MalumPlanksRegistry.RUNEWOOD_PLANKS.getDefaultState(), Settings.of(Material.WOOD, MapColor.DIRT_BROWN).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block VERTICAL_RUNEWOOD_PLANKS_STAIRS             = register("vertical_runewood_planks_stairs",           new StairsBlock(VERTICAL_RUNEWOOD_PLANKS.getDefaultState(), Settings.of(Material.WOOD, MapColor.DIRT_BROWN).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block RUNEWOOD_PANEL_STAIRS                       = register("runewood_panel_stairs",                     new StairsBlock(RUNEWOOD_PANEL.getDefaultState(), Settings.of(Material.WOOD, MapColor.DIRT_BROWN).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block RUNEWOOD_TILES_STAIRS                       = register("runewood_tiles_stairs",                     new StairsBlock(RUNEWOOD_TILES.getDefaultState(), Settings.of(Material.WOOD, MapColor.DIRT_BROWN).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block CUT_RUNEWOOD_PLANKS                         = register("cut_runewood_planks",                       new Block(Settings.of(Material.WOOD, MapColor.DIRT_BROWN).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block RUNEWOOD_BEAM                               = register("runewood_beam",                             new PillarBlock(Settings.of(Material.WOOD, MapColor.DIRT_BROWN).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block RUNEWOOD_DOOR                               = register("runewood_door",                             new DoorBlock(Settings.of(Material.WOOD, MapColor.DIRT_BROWN).strength(3.0F).sounds(BlockSoundGroup.WOOD).nonOpaque()));
    Block RUNEWOOD_TRAPDOOR                           = register("runewood_trapdoor",                         new TrapdoorBlock(Settings.of(Material.WOOD, MapColor.DIRT_BROWN).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD).nonOpaque()));
    Block SOLID_RUNEWOOD_TRAPDOOR                     = register("solid_runewood_trapdoor",                   new TrapdoorBlock(Settings.of(Material.WOOD, MapColor.DIRT_BROWN).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block RUNEWOOD_PLANKS_BUTTON                      = register("runewood_planks_button",                    new WoodenButtonBlock(Settings.of(Material.WOOD, MapColor.DIRT_BROWN).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block RUNEWOOD_PLANKS_PRESSURE_PLATE              = register("runewood_planks_pressure_plate",            new PressurePlateBlock(PressurePlateBlock.ActivationRule.EVERYTHING, Settings.of(Material.WOOD, MapColor.DIRT_BROWN).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD).noCollision()));
    Block RUNEWOOD_PLANKS_FENCE                       = register("runewood_planks_fence",                     new FenceBlock(Settings.of(Material.WOOD, MapColor.DIRT_BROWN).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block RUNEWOOD_PLANKS_FENCE_GATE                  = register("runewood_planks_fence_gate",                new FenceGateBlock(Settings.of(Material.WOOD, MapColor.DIRT_BROWN).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block RUNEWOOD_ITEM_STAND                         = register("runewood_item_stand",                       new ItemStandBlock(Settings.of(Material.WOOD, MapColor.DIRT_BROWN).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block RUNEWOOD_ITEM_PEDESTAL                      = register("runewood_item_pedestal",                    new WoodenItemPedestalBlock(Settings.of(Material.WOOD, MapColor.DIRT_BROWN).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));Block SOULWOOD_LEAVES                             = register("soulwood_leaves",                           new GradientLeavesBlock(Settings.of(Material.LEAVES).strength(0.2f).ticksRandomly().sounds(BlockSoundGroup.GRASS).nonOpaque().allowsSpawning(Blocks::canSpawnOnLeaves).suffocates(Blocks::never).blockVision(Blocks::never)));
    Block SOULWOOD_SAPLING                            = register("soulwood_sapling",                          new SaplingBlock(new SoulwoodSaplingGenerator(), Settings.of(Material.PLANT).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.GRASS)));
    Block STRIPPED_SOULWOOD_LOG                       = register("stripped_soulwood_log",                     new PillarBlock(Settings.of(Material.WOOD).strength(2.0f).sounds(BlockSoundGroup.WOOD)));
    Block SOULWOOD_LOG                                = register("soulwood_log",                              new StrippableLogBlock(() -> STRIPPED_SOULWOOD_LOG, Settings.of(Material.WOOD).strength(2.0f).sounds(BlockSoundGroup.WOOD)));
    Block STRIPPED_SOULWOOD                           = register("stripped_soulwood",                         new PillarBlock(Settings.of(Material.WOOD).strength(2.0f).sounds(BlockSoundGroup.WOOD)));
    Block SOULWOOD                                    = register("soulwood",                                  new StrippableLogBlock(() -> STRIPPED_SOULWOOD, Settings.of(Material.WOOD).strength(2.0f).sounds(BlockSoundGroup.WOOD)));
    Block REVEALED_SOULWOOD_LOG                       = register("revealed_soulwood_log",                     new RevealedPillarBlock(Settings.of(Material.WOOD).strength(2.0f).sounds(BlockSoundGroup.WOOD), STRIPPED_SOULWOOD_LOG, false));
    Block EXPOSED_SOULWOOD_LOG                        = register("exposed_soulwood_log",                      new StrippableLogBlock(() -> REVEALED_SOULWOOD_LOG, Settings.of(Material.WOOD).strength(2.0f).sounds(BlockSoundGroup.WOOD)));
    // SOULWOOD_PLANKS (in planks registry)
    Block VERTICAL_SOULWOOD_PLANKS                    = register("vertical_soulwood_planks",                  new Block(Settings.of(Material.WOOD, MapColor.TERRACOTTA_PURPLE).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block SOULWOOD_PANEL                              = register("soulwood_panel",                            new Block(Settings.of(Material.WOOD, MapColor.TERRACOTTA_PURPLE).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block SOULWOOD_TILES                              = register("soulwood_tiles",                            new Block(Settings.of(Material.WOOD, MapColor.TERRACOTTA_PURPLE).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block SOULWOOD_PLANKS_SLAB                        = register("soulwood_planks_slab",                      new SlabBlock(Settings.of(Material.WOOD, MapColor.TERRACOTTA_PURPLE).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block VERTICAL_SOULWOOD_PLANKS_SLAB               = register("vertical_soulwood_planks_slab",             new SlabBlock(Settings.of(Material.WOOD, MapColor.TERRACOTTA_PURPLE).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block SOULWOOD_PANEL_SLAB                         = register("soulwood_panel_slab",                       new SlabBlock(Settings.of(Material.WOOD, MapColor.TERRACOTTA_PURPLE).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block SOULWOOD_TILES_SLAB                         = register("soulwood_tiles_slab",                       new SlabBlock(Settings.of(Material.WOOD, MapColor.TERRACOTTA_PURPLE).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block SOULWOOD_PLANKS_STAIRS                      = register("soulwood_planks_stairs",                    new StairsBlock(MalumPlanksRegistry.SOULWOOD_PLANKS.getDefaultState(), Settings.of(Material.WOOD, MapColor.TERRACOTTA_PURPLE).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block VERTICAL_SOULWOOD_PLANKS_STAIRS             = register("vertical_soulwood_planks_stairs",           new StairsBlock(VERTICAL_SOULWOOD_PLANKS.getDefaultState(), Settings.of(Material.WOOD, MapColor.TERRACOTTA_PURPLE).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block SOULWOOD_PANEL_STAIRS                       = register("soulwood_panel_stairs",                     new StairsBlock(SOULWOOD_PANEL.getDefaultState(), Settings.of(Material.WOOD, MapColor.TERRACOTTA_PURPLE).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block SOULWOOD_TILES_STAIRS                       = register("soulwood_tiles_stairs",                     new StairsBlock(SOULWOOD_TILES.getDefaultState(), Settings.of(Material.WOOD, MapColor.TERRACOTTA_PURPLE).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block CUT_SOULWOOD_PLANKS                         = register("cut_soulwood_planks",                       new Block(Settings.of(Material.WOOD, MapColor.TERRACOTTA_PURPLE).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block SOULWOOD_BEAM                               = register("soulwood_beam",                             new PillarBlock(Settings.of(Material.WOOD, MapColor.TERRACOTTA_PURPLE).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block SOULWOOD_DOOR                               = register("soulwood_door",                             new DoorBlock(Settings.of(Material.WOOD, MapColor.TERRACOTTA_PURPLE).strength(3.0F).sounds(BlockSoundGroup.WOOD).nonOpaque()));
    Block SOULWOOD_TRAPDOOR                           = register("soulwood_trapdoor",                         new TrapdoorBlock(Settings.of(Material.WOOD, MapColor.TERRACOTTA_PURPLE).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD).nonOpaque()));
    Block SOLID_SOULWOOD_TRAPDOOR                     = register("solid_soulwood_trapdoor",                   new TrapdoorBlock(Settings.of(Material.WOOD, MapColor.TERRACOTTA_PURPLE).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD).nonOpaque()));
    Block SOULWOOD_PLANKS_BUTTON                      = register("soulwood_planks_button",                    new WoodenButtonBlock(Settings.of(Material.WOOD, MapColor.TERRACOTTA_PURPLE).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block SOULWOOD_PLANKS_PRESSURE_PLATE              = register("soulwood_planks_pressure_plate",            new PressurePlateBlock(PressurePlateBlock.ActivationRule.EVERYTHING, Settings.of(Material.WOOD, MapColor.TERRACOTTA_PURPLE).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD).noCollision()));
    Block SOULWOOD_PLANKS_FENCE                       = register("soulwood_planks_fence",                     new FenceBlock(Settings.of(Material.WOOD, MapColor.TERRACOTTA_PURPLE).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block SOULWOOD_PLANKS_FENCE_GATE                  = register("soulwood_planks_fence_gate",                new FenceGateBlock(Settings.of(Material.WOOD, MapColor.TERRACOTTA_PURPLE).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block SOULWOOD_ITEM_STAND                         = register("soulwood_item_stand",                       new ItemStandBlock(Settings.of(Material.WOOD, MapColor.TERRACOTTA_PURPLE).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block SOULWOOD_ITEM_PEDESTAL                      = register("soulwood_item_pedestal",                    new WoodenItemPedestalBlock(Settings.of(Material.WOOD, MapColor.TERRACOTTA_PURPLE).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD)));
    Block SOULSTONE_ORE                               = register("soulstone_ore",                             new ExperienceDroppingBlock(Settings.of(Material.STONE, MapColor.BLACK).strength(5.0f, 3.0f).sounds(MalumBlockSoundGroupRegistry.BLOCK_SOULSTONE_SOUNDS).requiresTool()));
    Block DEEPSLATE_SOULSTONE_ORE                     = register("deepslate_soulstone_ore",                   new ExperienceDroppingBlock(Settings.of(Material.STONE, MapColor.BLACK).strength(7.0f, 6.0f).sounds(MalumBlockSoundGroupRegistry.BLOCK_SOULSTONE_SOUNDS).requiresTool()));
    Block BLOCK_OF_RAW_SOULSTONE                      = register("block_of_raw_soulstone",                    new Block(Settings.of(Material.STONE, MapColor.BLACK).strength(5.0f, 3.0f).sounds(MalumBlockSoundGroupRegistry.BLOCK_SOULSTONE_SOUNDS).requiresTool()));
    Block BLOCK_OF_SOULSTONE                          = register("block_of_soulstone",                        new Block(Settings.of(Material.STONE, MapColor.BLACK).strength(5.0f, 3.0f).sounds(MalumBlockSoundGroupRegistry.BLOCK_SOULSTONE_SOUNDS).requiresTool()));
    Block SPIRIT_ALTAR                                = register("spirit_altar",                              new SpiritAltarBlock(Settings.of(Material.WOOD, MapColor.DIRT_BROWN).sounds(BlockSoundGroup.WOOD).strength(2.0f)));
    Block SPIRIT_JAR                                  = register("spirit_jar",                                new SpiritJarBlock(Settings.of(Material.GLASS, MapColor.BLUE).strength(0.5f, 64f)));
    Block RUNEWOOD_OBELISK                            = register("runewood_obelisk",                          new ObeliskBlock(MalumAcceleratorTypeRegistry.RUNEWOOD_ACCELERATOR_TYPE, Settings.of(Material.WOOD, MapColor.DIRT_BROWN).sounds(BlockSoundGroup.WOOD).strength(2.0f)));
    Block BRILLIANT_OBELISK                           = register("brilliant_obelisk",                         new ObeliskBlock(MalumAcceleratorTypeRegistry.BRILLIANT_ACCELERATOR_TYPE, Settings.of(Material.WOOD, MapColor.DIRT_BROWN).sounds(BlockSoundGroup.WOOD).strength(2.0f)));
    Block SPIRIT_CRUCIBLE                             = register("spirit_crucible",                           new SpiritCrucibleBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block RUNEWOOD_TOTEM_POLE                         = register("runewood_totem_pole",                       new TotemPoleBlock(() -> RUNEWOOD_LOG, Settings.of(Material.WOOD, MapColor.DIRT_BROWN).sounds(BlockSoundGroup.WOOD).strength(2.0f)));
    Block SOULWOOD_TOTEM_POLE                         = register("soulwood_totem_pole",                       new TotemPoleBlock(() -> SOULWOOD_LOG, Settings.of(Material.WOOD, MapColor.DIRT_BROWN).sounds(BlockSoundGroup.WOOD).strength(2.0f)));
    Block RUNEWOOD_TOTEM_BASE                         = register("runewood_totem_base",                       new TotemBaseBlock(Settings.of(Material.WOOD, MapColor.DIRT_BROWN).sounds(BlockSoundGroup.WOOD).strength(2.0f)));
    Block SOULWOOD_TOTEM_BASE                         = register("soulwood_totem_base",                       new TotemBaseBlock(Settings.of(Material.WOOD, MapColor.DIRT_BROWN).sounds(BlockSoundGroup.WOOD).strength(2.0f)));
    Block BLOCK_OF_HALLOWED_GOLD                      = register("block_of_hallowed_gold",                    new Block(Settings.of(Material.METAL, MapColor.YELLOW).requiresTool()));
    Block BLOCK_OF_SOUL_STAINED_STEEL                 = register("block_of_soul_stained_steel",               new Block(Settings.of(Material.METAL, MapColor.PURPLE).strength(5.0f, 64.0f).requiresTool()));
    Block ETHER                                       = register("ether",                                     new EtherBlock(Settings.of(Material.DECORATION).noCollision().breakInstantly().luminance(state -> 14).sounds(BlockSoundGroup.WOOD)));
    Block ETHER_TORCH                                 = register("ether_torch",                               new EtherTorchBlock(Settings.of(Material.DECORATION).noCollision().breakInstantly().luminance(state -> 14).sounds(BlockSoundGroup.WOOD)));
    Block WALL_ETHER_TORCH                            = register("wall_ether_torch",                          new EtherWallTorchBlock(Settings.of(Material.DECORATION).noCollision().breakInstantly().luminance(state -> 14).sounds(BlockSoundGroup.WOOD)));
    Block TAINTED_ETHER_BRAZIER                       = register("tainted_ether_brazier",                     new EtherBrazierBlock(Settings.of(Material.DECORATION).luminance(state -> 14).requiresTool()));
    Block TWISTED_ETHER_BRAZIER                       = register("twisted_ether_brazier",                     new EtherBrazierBlock(Settings.of(Material.DECORATION).luminance(state -> 14).requiresTool()));
    Block IRIDESCENT_ETHER                            = register("iridescent_ether",                          new EtherBlock(Settings.of(Material.DECORATION).noCollision().breakInstantly().luminance(state -> 14).sounds(BlockSoundGroup.WOOD)));
    Block IRIDESCENT_ETHER_TORCH                      = register("iridescent_ether_torch",                    new EtherTorchBlock(Settings.of(Material.DECORATION).noCollision().breakInstantly().luminance(state -> 14).sounds(BlockSoundGroup.WOOD)));
    Block IRIDESCENT_WALL_ETHER_TORCH                 = register("iridescent_wall_ether_torch",               new EtherWallTorchBlock(Settings.of(Material.DECORATION).noCollision().breakInstantly().luminance(state -> 14).sounds(BlockSoundGroup.WOOD)));
    Block TAINTED_IRIDESCENT_ETHER_BRAZIER            = register("tainted_iridescent_ether_brazier",          new EtherBrazierBlock(Settings.of(Material.DECORATION).luminance(state -> 14).requiresTool()));
    Block TWISTED_IRIDESCENT_ETHER_BRAZIER            = register("twisted_iridescent_ether_brazier",          new EtherBrazierBlock(Settings.of(Material.DECORATION).luminance(state -> 14).requiresTool()));
    Block TWISTED_TABLET                              = register("twisted_tablet",                            new TabletBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block SPIRIT_CATALYZER                            = register("spirit_catalyzer",                          new SpiritCatalyzerBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));

    // items & blocks, sorted [Main: Arcane Rocks]
    Block TAINTED_ROCK                                = register("tainted_rock",                              new Block(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block SMOOTH_TAINTED_ROCK                         = register("smooth_tainted_rock",                       new Block(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block POLISHED_TAINTED_ROCK                       = register("polished_tainted_rock",                     new Block(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TAINTED_ROCK_BRICKS                         = register("tainted_rock_bricks",                       new Block(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CRACKED_TAINTED_ROCK_BRICKS                 = register("cracked_tainted_rock_bricks",               new Block(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TAINTED_ROCK_TILES                          = register("tainted_rock_tiles",                        new Block(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CRACKED_TAINTED_ROCK_TILES                  = register("cracked_tainted_rock_tiles",                new Block(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block SMALL_TAINTED_ROCK_BRICKS                   = register("small_tainted_rock_bricks",                 new Block(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CRACKED_SMALL_TAINTED_ROCK_BRICKS           = register("cracked_small_tainted_rock_bricks",         new Block(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TAINTED_ROCK_COLUMN                         = register("tainted_rock_column",                       new PillarBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TAINTED_ROCK_COLUMN_CAP                     = register("tainted_rock_column_cap",                   new PillarCapBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CUT_TAINTED_ROCK                            = register("cut_tainted_rock",                          new Block(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CHISELED_TAINTED_ROCK                       = register("chiseled_tainted_rock",                     new Block(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TAINTED_ROCK_PRESSURE_PLATE                 = register("tainted_rock_pressure_plate",               new PressurePlateBlock(PressurePlateBlock.ActivationRule.MOBS, Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).noCollision().requiresTool()));
    Block TAINTED_ROCK_WALL                           = register("tainted_rock_wall",                         new WallBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TAINTED_ROCK_BRICKS_WALL                    = register("tainted_rock_bricks_wall",                  new WallBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CRACKED_TAINTED_ROCK_BRICKS_WALL            = register("cracked_tainted_rock_bricks_wall",          new WallBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TAINTED_ROCK_TILES_WALL                     = register("tainted_rock_tiles_wall",                   new WallBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CRACKED_TAINTED_ROCK_TILES_WALL             = register("cracked_tainted_rock_tiles_wall",           new WallBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block SMALL_TAINTED_ROCK_BRICKS_WALL              = register("small_tainted_rock_bricks_wall",            new WallBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CRACKED_SMALL_TAINTED_ROCK_BRICKS_WALL      = register("cracked_small_tainted_rock_bricks_wall",    new WallBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TAINTED_ROCK_SLAB                           = register("tainted_rock_slab",                         new SlabBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block SMOOTH_TAINTED_ROCK_SLAB                    = register("smooth_tainted_rock_slab",                  new SlabBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block POLISHED_TAINTED_ROCK_SLAB                  = register("polished_tainted_rock_slab",                new SlabBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TAINTED_ROCK_BRICKS_SLAB                    = register("tainted_rock_bricks_slab",                  new SlabBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CRACKED_TAINTED_ROCK_BRICKS_SLAB            = register("cracked_tainted_rock_bricks_slab",          new SlabBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TAINTED_ROCK_TILES_SLAB                     = register("tainted_rock_tiles_slab",                   new SlabBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CRACKED_TAINTED_ROCK_TILES_SLAB             = register("cracked_tainted_rock_tiles_slab",           new SlabBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block SMALL_TAINTED_ROCK_BRICKS_SLAB              = register("small_tainted_rock_bricks_slab",            new SlabBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CRACKED_SMALL_TAINTED_ROCK_BRICKS_SLAB      = register("cracked_small_tainted_rock_bricks_slab",    new SlabBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TAINTED_ROCK_STAIRS                         = register("tainted_rock_stairs",                       new StairsBlock(TAINTED_ROCK.getDefaultState(), Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block SMOOTH_TAINTED_ROCK_STAIRS                  = register("smooth_tainted_rock_stairs",                new StairsBlock(SMOOTH_TAINTED_ROCK.getDefaultState(), Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block POLISHED_TAINTED_ROCK_STAIRS                = register("polished_tainted_rock_stairs",              new StairsBlock(POLISHED_TAINTED_ROCK.getDefaultState(), Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TAINTED_ROCK_BRICKS_STAIRS                  = register("tainted_rock_bricks_stairs",                new StairsBlock(TAINTED_ROCK_BRICKS.getDefaultState(), Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CRACKED_TAINTED_ROCK_BRICKS_STAIRS          = register("cracked_tainted_rock_bricks_stairs",        new StairsBlock(CRACKED_TAINTED_ROCK_BRICKS.getDefaultState(), Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TAINTED_ROCK_TILES_STAIRS                   = register("tainted_rock_tiles_stairs",                 new StairsBlock(TAINTED_ROCK_TILES.getDefaultState(), Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CRACKED_TAINTED_ROCK_TILES_STAIRS           = register("cracked_tainted_rock_tiles_stairs",         new StairsBlock(CRACKED_TAINTED_ROCK_TILES.getDefaultState(), Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block SMALL_TAINTED_ROCK_BRICKS_STAIRS            = register("small_tainted_rock_bricks_stairs",          new StairsBlock(SMALL_TAINTED_ROCK_BRICKS.getDefaultState(), Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CRACKED_SMALL_TAINTED_ROCK_BRICKS_STAIRS    = register("cracked_small_tainted_rock_bricks_stairs",  new StairsBlock(CRACKED_SMALL_TAINTED_ROCK_BRICKS.getDefaultState(), Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TAINTED_ROCK_ITEM_STAND                     = register("tainted_rock_item_stand",                   new ItemStandBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TAINTED_ROCK_ITEM_PEDESTAL                  = register("tainted_rock_item_pedestal",                new StoneItemPedestalBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TWISTED_ROCK                                = register("twisted_rock",                              new Block(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block SMOOTH_TWISTED_ROCK                         = register("smooth_twisted_rock",                       new Block(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block POLISHED_TWISTED_ROCK                       = register("polished_twisted_rock",                     new Block(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TWISTED_ROCK_BRICKS                         = register("twisted_rock_bricks",                       new Block(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CRACKED_TWISTED_ROCK_BRICKS                 = register("cracked_twisted_rock_bricks",               new Block(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TWISTED_ROCK_TILES                          = register("twisted_rock_tiles",                        new Block(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CRACKED_TWISTED_ROCK_TILES                  = register("cracked_twisted_rock_tiles",                new Block(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block SMALL_TWISTED_ROCK_BRICKS                   = register("small_twisted_rock_bricks",                 new Block(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CRACKED_SMALL_TWISTED_ROCK_BRICKS           = register("cracked_small_twisted_rock_bricks",         new Block(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TWISTED_ROCK_COLUMN                         = register("twisted_rock_column",                       new PillarBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TWISTED_ROCK_COLUMN_CAP                     = register("twisted_rock_column_cap",                   new PillarCapBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CUT_TWISTED_ROCK                            = register("cut_twisted_rock",                          new Block(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CHISELED_TWISTED_ROCK                       = register("chiseled_twisted_rock",                     new Block(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TWISTED_ROCK_PRESSURE_PLATE                 = register("twisted_rock_pressure_plate",               new PressurePlateBlock(PressurePlateBlock.ActivationRule.MOBS, Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).noCollision().requiresTool()));
    Block TWISTED_ROCK_WALL                           = register("twisted_rock_wall",                         new WallBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TWISTED_ROCK_BRICKS_WALL                    = register("twisted_rock_bricks_wall",                  new WallBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CRACKED_TWISTED_ROCK_BRICKS_WALL            = register("cracked_twisted_rock_bricks_wall",          new WallBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TWISTED_ROCK_TILES_WALL                     = register("twisted_rock_tiles_wall",                   new WallBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CRACKED_TWISTED_ROCK_TILES_WALL             = register("cracked_twisted_rock_tiles_wall",           new WallBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block SMALL_TWISTED_ROCK_BRICKS_WALL              = register("small_twisted_rock_bricks_wall",            new WallBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CRACKED_SMALL_TWISTED_ROCK_BRICKS_WALL      = register("cracked_small_twisted_rock_bricks_wall",    new WallBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TWISTED_ROCK_SLAB                           = register("twisted_rock_slab",                         new SlabBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block SMOOTH_TWISTED_ROCK_SLAB                    = register("smooth_twisted_rock_slab",                  new SlabBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block POLISHED_TWISTED_ROCK_SLAB                  = register("polished_twisted_rock_slab",                new SlabBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TWISTED_ROCK_BRICKS_SLAB                    = register("twisted_rock_bricks_slab",                  new SlabBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CRACKED_TWISTED_ROCK_BRICKS_SLAB            = register("cracked_twisted_rock_bricks_slab",          new SlabBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TWISTED_ROCK_TILES_SLAB                     = register("twisted_rock_tiles_slab",                   new SlabBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CRACKED_TWISTED_ROCK_TILES_SLAB             = register("cracked_twisted_rock_tiles_slab",           new SlabBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block SMALL_TWISTED_ROCK_BRICKS_SLAB              = register("small_twisted_rock_bricks_slab",            new SlabBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CRACKED_SMALL_TWISTED_ROCK_BRICKS_SLAB      = register("cracked_small_twisted_rock_bricks_slab",    new SlabBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TWISTED_ROCK_STAIRS                         = register("twisted_rock_stairs",                       new StairsBlock(TWISTED_ROCK.getDefaultState(), Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block SMOOTH_TWISTED_ROCK_STAIRS                  = register("smooth_twisted_rock_stairs",                new StairsBlock(SMOOTH_TWISTED_ROCK.getDefaultState(), Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block POLISHED_TWISTED_ROCK_STAIRS                = register("polished_twisted_rock_stairs",              new StairsBlock(POLISHED_TWISTED_ROCK.getDefaultState(), Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TWISTED_ROCK_BRICKS_STAIRS                  = register("twisted_rock_bricks_stairs",                new StairsBlock(TWISTED_ROCK_BRICKS.getDefaultState(), Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CRACKED_TWISTED_ROCK_BRICKS_STAIRS          = register("cracked_twisted_rock_bricks_stairs",        new StairsBlock(CRACKED_TWISTED_ROCK_BRICKS.getDefaultState(), Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TWISTED_ROCK_TILES_STAIRS                   = register("twisted_rock_tiles_stairs",                 new StairsBlock(TWISTED_ROCK_TILES.getDefaultState(), Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CRACKED_TWISTED_ROCK_TILES_STAIRS           = register("cracked_twisted_rock_tiles_stairs",         new StairsBlock(CRACKED_TWISTED_ROCK_TILES.getDefaultState(), Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block SMALL_TWISTED_ROCK_BRICKS_STAIRS            = register("small_twisted_rock_bricks_stairs",          new StairsBlock(SMALL_TWISTED_ROCK_BRICKS.getDefaultState(), Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block CRACKED_SMALL_TWISTED_ROCK_BRICKS_STAIRS    = register("cracked_small_twisted_rock_bricks_stairs",  new StairsBlock(CRACKED_SMALL_TWISTED_ROCK_BRICKS.getDefaultState(), Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TWISTED_ROCK_ITEM_STAND                     = register("twisted_rock_item_stand",                   new ItemStandBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TWISTED_ROCK_ITEM_PEDESTAL                  = register("twisted_rock_item_pedestal",                new StoneItemPedestalBlock(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TAINTED_ROCK_BUTTON                         = register("tainted_rock_button",                       new StoneButtonBlock(AbstractBlock.Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block TWISTED_ROCK_BUTTON                         = register("twisted_rock_button",                       new StoneButtonBlock(AbstractBlock.Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));
    Block BLOCK_OF_ARCANE_CHARCOAL                    = register("block_of_arcane_charcoal",                  new Block(AbstractBlock.Settings.of(Material.STONE, MapColor.BLACK).strength(5.0f, 6.0f).sounds(MalumBlockSoundGroupRegistry.BLOCK_ARCANE_CHARCOAL_SOUNDS).requiresTool()));
    Block BLAZING_QUARTZ_ORE                          = register("blazing_quartz_ore",                        new Block(AbstractBlock.Settings.of(Material.STONE, MapColor.DARK_RED).strength(3.0f, 3.0f).sounds(MalumBlockSoundGroupRegistry.BLOCK_BLAZING_QUARTZ_ORE_SOUNDS).requiresTool()));
    Block BLOCK_OF_BLAZING_QUARTZ                     = register("block_of_blazing_quartz",                   new Block(AbstractBlock.Settings.of(Material.STONE, MapColor.RED).strength(5.0f, 6.0f).sounds(MalumBlockSoundGroupRegistry.BLOCK_BLAZING_QUARTZ_BLOCK_SOUNDS).requiresTool()));
    Block BRILLIANT_STONE                             = register("brilliant_stone",                           new Block(AbstractBlock.Settings.of(Material.STONE, MapColor.STONE_GRAY).strength(3.0f, 3.0f).sounds(MalumBlockSoundGroupRegistry.BLOCK_BRILLIANCE_SOUNDS).requiresTool()));
    Block BRILLIANT_DEEPSLATE                         = register("brilliant_deepslate",                       new Block(AbstractBlock.Settings.of(Material.STONE, MapColor.DEEPSLATE_GRAY).strength(4.5f, 3.0f).sounds(BlockSoundGroup.DEEPSLATE).requiresTool()));
    Block BLOCK_OF_BRILLIANCE                         = register("block_of_brilliance",                       new Block(AbstractBlock.Settings.of(Material.STONE, MapColor.STONE_GRAY).strength(3.0f, 3.0f).sounds(BlockSoundGroup.DEEPSLATE).requiresTool()));
    Block THE_DEVICE                                  = register("the_device",                                new TheDevice(Settings.of(Material.STONE, MapColor.STONE_GRAY).sounds(MalumBlockSoundGroupRegistry.BLOCK_TAINTED_ROCK_SOUNDS).strength(1.25f, 9.0f).requiresTool()));

    static <T extends Block> T register(String id, T block) {
        BLOCKS.put(new Identifier(Malum.MODID, id), block);
        return block;
    }
    
    static void init() {
        MalumPlanksRegistry.init();
        MalumSignRegistry.init();
        BLOCKS.forEach((id, block) -> Registry.register(Registry.BLOCK, id, block));
    }
}
